"use client";
import { getAuth, onAuthStateChanged } from "firebase/auth";
import { initializeApp } from "firebase/app";
import React, { useEffect, useState } from "react";
import firebaseConfig from "../utils/fire_base_config";
import { useRouter, useSearchParams } from "next/navigation";
import {
  addDoc,
  collection,
  getFirestore,
  serverTimestamp,
} from "firebase/firestore";
import Image from "next/image";

const Review = (props: any) => {
  const {
    disable,
    setdisable,
    uuid,
    trimmedReviews,
    seeall_review,
    seeless_review,
    hackdisable,
    sethackdisable,
    review_empty,
    size,
  } = props;
  const app = initializeApp(firebaseConfig);
  const db = getFirestore(app);
  const route = useRouter();

  const searchParams = useSearchParams();

  const product_id = searchParams.get("product_id");
  const [items, setitems] = useState(["", "", "", ""]);
  const [review_text, setreview_text] = useState("");
  const [post_text, setpost_text] = useState("Post");

  const handleSubmit = (event: any) => {
    sethackdisable(true);
    event.preventDefault(); // Prevent the default form submit action
    if (review_text != "") {
      // Add a new document with a generated id to the "reviews" collection
      setpost_text("Posting");
      addDoc(collection(db, "reviews"), {
        id: product_id, // This will be the custom field for id, usually auto-generated by Firestore
        text: review_text,
        userId: uuid,
        createdAt: serverTimestamp(),
      })
        .then((docRef) => {
          sethackdisable(false);
          setreview_text("");
          setpost_text("Post");
        })
        .catch((e) => {
          console.error("Error adding document: ", e);
          setpost_text("Try again");
        });
    }
  };
  return (
    <>
      <div className="w-full h-auto px-[4vw] sm:mt-[4vw]">
        <div className="w-full h-full gap-[3vw] sm:gap-[8vw] flex flex-col ">
          {/* the reivew count and the input field */}
          <div className="w-full flex justify-between items-center sm:items-start sm:flex-col sm:gap-[7vw]">
            <p className="neuer text-[1.3vw] text-white sm:text-[4.5vw]">
              REVIEWS ( {size} )
            </p>
            {/* the form to handle comments  */}
            <form
              className="w-[40vw] h-auto sm:w-full  relative text-[1vw]"
              onSubmit={handleSubmit}
            >
              <input
                type="text"
                placeholder={disable ? "Login to comment" : "Write a  comment"}
                className="w-full h-[3.4vw] rounded-[2.5vw] sm:h-[13vw] sm:rounded-[6vw] outline-none focus:border-opacity-[100%] sm:text-[3.5vw] sm:pl-[4vw] sm:pr-[12vw] text-white text-opacity-[80%] pl-[2vw] pr-[4.2vw] neuer transition duration-[0.6s] bg-transparent border-[0.1vw] border-white border-opacity-[40%]"
                onChange={(e: any) => {
                  setreview_text(e.target.value);
                }}
                disabled={disable}
                value={review_text || ""}
              />
              <button
                type="submit"
                disabled={disable}
                className="text-[#CCFF00]  neuer text-[1.2vw] sm:text-[3.5vw]  sm:right-[3vw] absolute right-[1.3vw] hover:hover:text-[#7e9426] transition duration-[0.5s] top-[-50%] translate-y-[50%] h-full"
                onClick={() => {
                  //   handlecomment(postdata.postId);
                }}
              >
                {post_text}
              </button>
            </form>
          </div>
          {/* now this is for the reviews  */}
          <div className="  h-auto w-full sm:gap-[5vw] flex justify-start flex-wrap items-center gap-[1.2vw]">
            {trimmedReviews.map((e: any, index: any) => {
              return (
                <div
                  className=" p-[2.5vw] sm:w-[43.2vw]  sm:gap-[5vw] sm:rounded-[6vw] relative  sm:py-[5vw] w-[21.5vw] border-[white] border-opacity-[40%] border-[0.1vw] rounded-[2vw] flex flex-col gap-[1.2vw] justify-center "
                  key={index}
                >
                  <div
                    className="w-[4vw] h-[4vw] overflow-hidden sm:w-[10vw] sm:h-[10vw] avater_bg  rounded-[100%]"
                    style={{ backgroundImage: "url(/cover.webp)" }}
                  >
                    <Image
                      src={e.avatar}
                      alt="user avatar"
                      unoptimized
                      width="0"
                      height="0"
                      className="h-full w-full"
                    />
                  </div>
                  <div className=" flex flex-col gap-[0.7vw] sm:gap-[2vw] flex-wrap h-auto ">
                    <p className="text-white neuer capitalize sm:text-[2.8vw] opacity-[60%] text-[1.1vw]">
                      {e.name}
                    </p>
                    <p className="text-white neuer  overflow-hidden w-full text-[0.9vw] sm:text-[3vw]">
                      {e.text}
                    </p>
                  </div>
                  {/* the three small boxes */}
                  <div className="w-[0.5vw] sm:w-[1.3vw] sm:top-[3vw] sm:right-[4vw] sm:h-[1.3vw] absolute top-[1.7vw] right-[1.7vw] h-[0.5vw] bg-white rounded-[100%] bg-opacity-[50%]"></div>
                  <div className="w-[0.5vw] sm:w-[1.3vw] sm:bottom-[3vw] sm:right-[4vw] sm:h-[1.3vw] absolute bottom-[1.7vw] right-[1.7vw] h-[0.5vw] bg-white rounded-[100%] bg-opacity-[50%]"></div>
                  <div className="w-[0.5vw] sm:w-[1.3vw] sm:bottom-[3vw] sm:left-[4vw] sm:h-[1.3vw] absolute bottom-[1.7vw] left-[1.7vw] h-[0.5vw] bg-white rounded-[100%] bg-opacity-[50%]"></div>
                </div>
              );
            })}
            {trimmedReviews.length == 0 && review_empty && (
              <div className="w-full sm:h-[30vw]  h-[5vw] flex justify-center items-center ">
                <p className="text-[1.2vw] text-white text-opacity-[70%] capitalize neuer sm:text-[3.5vw] ">
                  There are no reviews for this product yet
                </p>
              </div>
            )}
          </div>

          {trimmedReviews.length < 5 && trimmedReviews.length != 0 && (
            <button
              onClick={() => {
                seeall_review();
              }}
              className="bg-[#CCFF00]  sm:mt-[2vw] sm:w-full sm:text-[4vw] sm:py-[3vw] sm:rounded-[5vw]  py-[1.1vw] px-[5vw] hover:bg-opacity-[70%] rounded-[2vw] w-fit neuem text-[1.2vw]"
              // style={{
              //   position: globalThis.innerWidth < 650 ? "sticky" : "relative",
              //   bottom: "5vw",
              // }}
            >
              See All
            </button>
          )}

          {trimmedReviews.length > 4 && (
            <button
              onClick={() => {
                seeless_review();
              }}
              className="bg-[#CCFF00] sm:w-full sm:text-[4vw] sm:py-[3vw] sm:rounded-[5vw]  py-[1.1vw] px-[5vw] hover:bg-opacity-[70%] rounded-[2vw] w-fit neuem text-[1.2vw]"
            >
              See Less
            </button>
          )}
        </div>
      </div>
    </>
  );
};

export default Review;
